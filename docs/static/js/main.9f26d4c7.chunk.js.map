{"version":3,"sources":["Data/basic.ts","Data/summary.ts","Data/education.ts","Data/experience.ts","Data/volunteer.ts","Components/Reactive.tsx","Components/Header.tsx","Components/Summary.tsx","Components/Education.tsx","Components/Experience.tsx","Components/Footer.tsx","Components/Audience.tsx","Components/Contact.tsx","App.tsx","serviceWorker.js","index.js","Data/images/ftaa-1.png","Data/images/ftaa-2.png","Data/images/ftaa-3.png","Data/images/magda-1.png","Data/images/magda-2.png","Data/images/groundwater-1.png","Data/images/groundwater-2.png","Data/images/automap-1.png","Data/images/automap-2.png","Data/images/tm-1.jpg","Data/images/tm-2.jpg","Data/images/okai-1.jpg","Data/images/okai-2.png"],"names":["BasicData","name","yearsOfCoding","Date","getFullYear","SummaryData","EducationData","start","finish","course","institution","major","description","thesis","ExperienceData","position","company","projects","role","achievements","technology","soft","images","require","VolunteerDataData","Container","props","react_default","a","createElement","Object","assign","className","children","Full","HalfLeft","HalfRight","Header","react_document_title_default","title","Summary","audience","Fragment","technical","data","map","element","compiled","slice","detailLevel","join","key","Education","Experience","label","filter","since","Math","random","formatTime","Project","project","image","href","src","alt","react_markdown_default","source","achievement","formatTechnology","list","sort","arrayToSentence","input","match","_input$split","split","_input$split2","slicedToArray","year","month","MONTHS","01","02","03","04","05","06","07","08","09","10","11","12","Footer","DetailLevel","AudiencePicker","onChange","SelectWrapper","options","technicalOptions","value","toString","localStorage","resumeTechnical","detailLevelOptions","resumeDetailLevel","parseInt","sinceOptions","resumeSince","defaultAudience","concat","react_select_esm","defaultValue","find","option","styles","objectSpread","color","cursor","Contact","contact","JSON","parse","resumeContact","e","keys","length","renderers","paragraph","push","App","state","_this2","this","update","setState","VolunteerData","React","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"qLAIeA,EAJQ,CACrBC,KAAM,eCDFC,GAAgB,IAAIC,MAAOC,cAAgB,KA0BlCC,EAvBK,CAClB,CACE,iBAJsB,IAAIF,MAAOC,cAAgB,MAM/C,uDACF,iCAAmCF,EAAgB,cAErD,CACE,oGACA,6KACA,uGAEF,CACE,8EACA,gIAEF,CACE,uEACA,+HAEF,CAAC,0GCCYI,EAxBO,CACpB,CACEC,MAAO,OACPC,OAAQ,OACRC,OAAQ,oCACRC,YAAa,mCACbC,MAAO,mBACPC,YACE,klBACFC,OAAQ,2FAEV,CACEN,MAAO,OACPC,OAAQ,OACRC,OAAQ,mCACRC,YAAa,iCACbC,MAAO,uBACPC,YACE,s6BACFC,OACE,iNCgRSC,EApSQ,CACrB,CACEP,MAAO,UACPC,OAAQ,UACRO,SAAU,4BACVC,QACE,8BACFC,SAAU,CACR,CACEC,KAAM,4BACNjB,KAAM,qCACNM,MAAO,UACPC,OAAQ,UACRI,YACE,yQACFO,aAAc,CACZ,4GACA,6UACA,6MACA,4HACA,oKACA,4IAEFC,WAAY,CACV,mBACA,MACA,gBACA,0BACA,6BACA,aACA,aACA,SACA,QACA,kBACA,iBACA,MACA,SACA,SACA,eACA,SACA,oBACA,gBACA,qBAEFC,KAAM,CACJ,aACA,2BACA,0BACA,cACA,YACA,qBAKR,CACEd,MAAO,UACPC,OAAQ,UACRO,SAAU,2BACVC,QACE,gFACFC,SAAU,CACR,CACEC,KAAM,iBACNjB,KAAM,oCACNM,MAAO,UACPC,OAAQ,UACRI,YACE,kOACFO,aAAc,CACZ,0IACA,oPACA,yWACA,uKACA,+KACA,6FAEFC,WAAY,CACV,mBACA,MACA,gBACA,MACA,kBACA,6BACA,OACA,aACA,aACA,SACA,QACA,8BACA,iCACA,mBACA,WACA,UACA,kBACA,UAEFC,KAAM,CACJ,aACA,2BACA,0BACA,mBACA,YACA,iBACA,cAEFC,OAAQ,CACNC,EAAQ,IACRA,EAAQ,IACRA,EAAQ,MAGZ,CACEL,KAAM,kBACNX,MAAO,UACPC,OAAQ,UACRP,KAAM,oDACNW,YACE,oRACFO,aAAc,CACZ,+PACA,0NAEF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","file":"static/js/main.9f26d4c7.chunk.js","sourcesContent":["const BasicData: any = {\n  name: \"Nahid Akbar\"\n};\n\nexport default BasicData;\n","const yearsOfCoding = new Date().getFullYear() - 2001;\nconst yearsOfExperience = new Date().getFullYear() - 2009;\n\nconst SummaryData = [\n  [\n    \"I have over \" +\n      yearsOfExperience +\n      \" years of experience working as a Software Engineer.\",\n    \"I wrote my first line of code \" + yearsOfCoding + \" years ago\",\n  ],\n  [\n    \"I am a polyglot and have worked with a wide range of programming languages, tools and frameworks.\",\n    \"This includes C++, Python, NodeJS, Golang etc. on server-side / back-end and HTML, CSS, JavaScript, ES6+, Typescript, React, Knockout, D3 etc. on client-side / front-end.\",\n    \"I enjoy experimenting with and can quickly pick up new programming languages, tools and frameworks.\",\n  ],\n  [\n    \"I have designed, developed and delivered for a wide range of architectures.\",\n    \"This includes projects in microservices, server-client, event sourced, repository, peer to peer and pipe and filter systems.\",\n  ],\n  [\n    \"I have developed and deployed systems for a wide range of platforms.\",\n    \"This includes Container Clusters (Kubernetes, Docker Swarms), Cloud (Google, AWS), Virtual Machines and Computing Clusters.\",\n  ],\n  [\"I want to continue supporting my high performance team and apply myself as a hands on servant leader.\"],\n];\n\nexport default SummaryData;\n\n","const EducationData = [\n  {\n    start: \"2017\",\n    finish: \"2019\",\n    course: \"Master of Business Administration\",\n    institution: \"Australian Institute of Business\",\n    major: \"Entrepreneurship\",\n    description:\n      \"I reflected on and re-assessed my career. I decided to focus career development towards engineering leadership, communication and softer aspects of product development. I wanted to both diversify my knowledge and acquire relevant theoretical foundation in management. I found that MBA complemented my engineering experience well. It enhanced the strategic dimension of my thinking. It helped me focus more on what is important in projects; helped me relate to customers and their needs and wants more; and gave a path I have taken to continuously make myself a better leader and team player.\",\n    thesis: \"My masters capstone project was on financial forecasting using machine learning models.\"\n  },\n  {\n    start: \"2005\",\n    finish: \"2010\",\n    course: \"Bachelor of Software Engineering\",\n    institution: \"Australian National University\",\n    major: \"Software Engineering\",\n    description:\n      \"Programming has been a long term hobby for me. I have been hacking together HTML and JavaScript in FrontPage since I was exposed in high school. When working in school website and newspaper wasn't enough, I turned my retro games hobby into emulator and middleware programming to be able to inject macros and be able to play with friends over network. I shocked everyone when I came third in New Zealand's Net Guide High School level web design competition in year nine with a team of one. I also liked maths and physics and started my undergrad journey to be an Electrical Engineer. Despite thinking I was a really good programmer at the time, I realised how little I knew of programming through its mandatory programming courses. I realised that solving problems with software was my passion. I changed my degree to software engineering. My degree gave me the theoretical foundation and confidence to tackle any software projects.\",\n    thesis:\n      \"My industrial projects included developing software for 3G femtocell as part of a team of five in third year and leading a team of four student engineers to produce a metadata entry tool in my final year.\"\n  }\n];\n\nexport default EducationData;\n","const ExperienceData = [\n  {\n    start: \"2019-06\",\n    finish: \"PRESENT\",\n    position: \"Software Engineering Lead\",\n    company:\n      \"RDCCO Pty. Ltd. / Permaconn\",\n    projects: [\n      {\n        role: \"Software Engineering Lead\",\n        name: \"Permaconn Engineering/Product Team\",\n        start: \"2019-06\",\n        finish: \"PRESENT\",\n        description:\n          \"Permaconn manufacture and manage IoT devices for high security high availability alarm system communication. The Software team is a small engineering team responsible for fleet automation, CRM, billing, website, customer facing apps and other operations systems.\",\n        achievements: [\n          \"I transitioned into the engineering lead of the design, development, testing and operations of this team.\",\n          \"I set up an efficient and ad-hoc agile process fit for team members experience and my service leadership style. I've supported and protected my team members, helped them grow, mentoring and cheerleading them as as necessary to be more engaged and do their best work. I have promoted a culture of autonomy, excellence and openness.\",\n          \"I developed, helped develop and worn whatever hat is necessary to facilitate the development of many new products and services in collaboration with the team, other internal teams and external partners.\",\n          \"I introduced continuous integration and automated testing to the team. There were no automated tests prior to my arrival.\",\n          \"I introduced modern DevOps tools and practices to the team. This includes zero downtime deployments, monitoring tools, containerisation, orchastration tools etc.\",\n          \"I transitioned a large monolithic legacy system developed over many years to a high scalability availability microservices architecture.\"\n        ],\n        technology: [\n          \"High Scalability\",\n          \"AWS\",\n          \"High Security\",\n          \"Monolithic architecture\",\n          \"Microservices architecture\",\n          \"TypeScript\",\n          \"JavaScript\",\n          \"NodeJS\",\n          \"React\",\n          \"REST API Design\",\n          \"RPC API Design\",\n          \"C++\",\n          \"DevOps\",\n          \"Docker\",\n          \"Docker Swarm\", \n          \"Python\",\n          \"Ademco Contact ID\",\n          \"Alarm Systems\",\n          \"Cost Optimisation\"\n        ],\n        soft: [\n          \"Leadership\",\n          \"Requirements Engineering\",\n          \"Technical Documentation\",\n          \"Recruitment\",\n          \"Mentoring\",\n          \"Prioritisation\"\n        ],\n      }\n    ]\n  },\n  {\n    start: \"2016-07\",\n    finish: \"2019-06\",\n    position: \"Senior Software Engineer\",\n    company:\n      \"Commonwealth Scientific and Industrial Research Organisation (CSIRO) - Data61\",\n    projects: [\n      {\n        role: \"Technical Lead\",\n        name: \"Free Trade Agreement (FTA) Portal\",\n        start: \"2015-04\",\n        finish: \"2019-06\",\n        description:\n          \"FTA Portal was a strategic partnership project with Department of Foreign Affairs and Trade (https://ftaportal.dfat.gov.au/). This project was aimed at making FTA data more accessible for Australian importers and exporters.\",\n        achievements: [\n          \"I developed initial prototypes to demonstrate NICTA's ability to deliver to requirements which lead us to win the bidding for the work.\",\n          \"Subsequently, I took ownership of the project, architected, developed and delivered first three phases of this project over four years. This project was handed over to subcontractors for further development and maintenance earlier this year.\",\n          \"I technically lead a multi-disciplinary team of 6-8 members (3-4 Data61 side and 3-4 customer side). I became a domain expert on FTA data. I helped mentor, advise and on-board on technical and domain matters. I enabled work experience students; new and substitute developers; user experience designers, project managers; and members of team on customer side.\",\n          \"I developed a natural language search engine that allows obscurely described product classifications used in foreign trade to be identified via commonly used terms.\",\n          \"I designed a highly scalable public facing REST API for searching and serving trade data that outperformed equivalent elasticsearch implementation by over a factor of 1000.\",\n          \"I produced high standard technical documentation to communicate architecture and designs.\"\n        ],\n        technology: [\n          \"High Scalability\",\n          \"AWS\",\n          \"High Security\",\n          \"ISM\",\n          \"Query Expansion\",\n          \"Server-client architecture\",\n          \"CQRS\",\n          \"TypeScript\",\n          \"JavaScript\",\n          \"NodeJS\",\n          \"React\",\n          \"Natural Language Processing\",\n          \"Information Retrieval / Search\",\n          \"Data Engineering\",\n          \"Word2vec\",\n          \"Wordnet\",\n          \"REST API Design\",\n          \"Python\"\n        ],\n        soft: [\n          \"Leadership\",\n          \"Requirements Engineering\",\n          \"Technical Documentation\",\n          \"Customer Liaison\",\n          \"Mentoring\",\n          \"Prioritisation\",\n          \"Estimation\"\n        ],\n        images: [\n          require(\"./images/ftaa-1.png\"),\n          require(\"./images/ftaa-2.png\"),\n          require(\"./images/ftaa-3.png\")\n        ]\n      },\n      {\n        role: \"Senior Engineer\",\n        start: \"2018-07\",\n        finish: \"2019-06\",\n        name: \"Make Australian Government Data Available (MAGDA)\",\n        description:\n          \"MAGDA was an open source federated data discovery portal – https://magda.io/. It sourced and harmonised datasets from multiple data catalogues and made them discoverable in one place. It currently powers Australian Government's open data portal (https://data.gov.au/).\",\n        achievements: [\n          \"I contributed towards its ongoing architecture, design, development and devops. This included a content management system and associated microservice, a privacy preserving dataset duplicate detection feature and drag and drop add dataset functionality.\",\n          \"I helped the team find its long term goals, vision and customer value proposition with discussion, market analysis, customer interviews, helping facilitate a workshop and participating in a pre-accelerator program.\"\n        ],\n        images: [\n          require(\"./images/magda-1.png\"),\n          require(\"./images/magda-2.png\")\n        ],\n        technology: [\n          \"Cloud native (Google Cloud)\",\n          \"Microservices\",\n          \"TypeScript\",\n          \"JavaScript\",\n          \"React\",\n          \"NodeJS\",\n          \"Scala\",\n          \"REST API\",\n          \"ElasticSearch\",\n          \"PostgreSQL\"\n        ],\n        soft: [\n          \"Agile\",\n          \"Scrum\",\n          \"Kanban\",\n          \"Customer Interviews\",\n          \"Prioritisation\",\n          \"Estimation\"\n        ]\n      },\n      {\n        role: \"Senior Engineer\",\n        name: \"Digiscape\",\n        start: \"2018-01\",\n        finish: \"2018-06\",\n        description:\n          \"Digiscape was CSIRO’s Agricultural Sciences Platform that manages sensor data (e.g. rainfall), runs models on sensor data. A new model needed to be integrated and delivered for Digital Agricultural Services (https://digitalagricultureservices.com/).\",\n        achievements: [\n          \"I productified and tested risk assessment research model written in R and integrated it to the Digiscape platform.\",\n          \"I produced easy to understand prototypes for customer explaining how to integrate with CSIRO platform programmatically via REST API.\",\n          \"I further developed the platform and API to simplify integration of third-party systems.\"\n        ],\n        technology: [\"Java\", \"REST API\", \"Event Sourcing\", \"R\", \"JavaScript\"]\n      },\n      {\n        role: \"Data harmonisation lead\",\n        name: \"Expert Connect\",\n        start: \"2017-01\",\n        finish: \"2017-06\",\n        description:\n          \"Expert Connect was Data61's platform that was the one stop discovery portal of Australian research capability (https://expertconnect.global/). It harvested and harmonised data from multiple sources and indexed them.\",\n        achievements: [\n          \"I architected and prototyped data harvesting and harmonisation modules for the first version of Data61 Expert Connect platform. This involved integrating with a number of data sources of grants, publications and patent systems through different types of APIs. The prototype was used for the product's initial launch and subsequent ministerial launch demo.\"\n        ],\n        technology: [\"Data Engineering\", \"Golang\", \"REST\", \"SOAP\"]\n      }\n    ]\n  },\n  {\n    start: \"2011-11\",\n    finish: \"2016-06\",\n    position: \"Software Engineer\",\n    company: \"National ICT Australia (NICTA)\",\n    projects: [\n      {\n        role: \"Engineer\",\n        name: \"Groundwater Visualisation\",\n        start: \"2014-07\",\n        finish: \"2016-07\",\n        description:\n          \"Groundwater Visualisation was a tool to aid decision making in NSW Coal Seam Gas policy-making space. Groundwater subsurface modelling used to be  required before coal seam gas mining could take place. However, the models could be incorrectly produced due to human error or to conclude any results and there was no way to visually or programmatically check these models.\",\n        achievements: [\n          \"I built the highly performant browser based 3d subsurface visualisation tool on top of TerriaJS for investigating subsurface modelling and borehole data.\",\n          \"I built time travel functionality for viewing time series model data where available.\",\n          \"I built visual 3d slicing tool for cutting arbitrary intersections within 3d models and comparing model data with borehole data along those intersections.\",\n          \"I designed and implemented an optimised binary format for storing, transferring, inspecting and rendering large 3d model datasets inside browser.\"\n        ],\n        technology: [\n          \"Python\",\n          \"JavaScript\",\n          \"TerriaJS\",\n          \"CesiumJS\",\n          \"Matlab\",\n          \"Maths\",\n          \"C++\"\n        ],\n        images: [\n          require(\"./images/groundwater-1.png\"),\n          require(\"./images/groundwater-2.png\")\n        ]\n      },\n      {\n        role: \"Engineer\",\n        name: \"LandSat Demo\",\n        start: \"2015-03\",\n        finish: \"2015-04\",\n        description:\n          \"This was a proof of concept demo for a collaboration project. This was to demonstrate ability detect changes in vegetation from Satellite imagery.\",\n        achievements: [\n          \"I built a prototype to read in LandSat GeoTiff images using C++ to remove noise and normalised input image data for machine learning.\",\n          \"I trained and built model for filling gaps in LandSat imagery due to clouds etc. using SVM\",\n          \"I trained and built model for predicting deforestation.\"\n        ],\n        technology: [\"C++\", \"Data Cube\", \"Matlab\"]\n      },\n      {\n        role: \"Engineer\",\n        name: \"Geothermal Data Fusion\",\n        start: \"2014-05\",\n        finish: \"2014-07\",\n        description:\n          \"Drilling a hole to detect if there are hot rocks underground for geothermal power stations costs upwards of millions of dollars. GDF was a project for speedy and cost effective detection of potential geothermal power station locations based on sensor data (e.g. gravity, seismic, magnetic etc.).\",\n        achievements: [\n          \"I implemented new sensor simulation models to complete the platform.\",\n          \"I scaled simulating models into computing cluster (SGE) and cloud (AWS) for speedy simulation running.\",\n          \"I developed tests and helped reduce technical debts of this platform written in C++\"\n        ],\n        technology: [\"Python\", \"C++\", \"Boost\", \"AWS\", \"ZeroMQ\", \"Maths\"]\n      },\n      {\n        role: \"Engineer\",\n        name: \"Automap\",\n        start: \"2011-11\",\n        finish: \"2014-05\",\n        description:\n          \"Automap was an Automated Asset Mapping solution from video streams and point cloud sensor data (https://www.youtube.com/watch?v=EsgHkOswsAI).\",\n        achievements: [\n          \"I helped design and built platform for distributing large amount of computer vision batch processing work into computing cluster (SGE) and offshore QA processing.\",\n          \"I helped design and built a standalone version of Automap product for an industry partner who wanted to do processing work in house on a single server.\",\n          \"I commercialised computer vision research for automatic classification of assets prior to QA work in image processing and point cloud data.\",\n          \"I designed and built several web-based point cloud libelling and visualisation tools to support computer vision research.\"\n        ],\n        technology: [\n          \"Python\",\n          \"C++\",\n          \"Maths\",\n          \"ThreeJS\",\n          \"Sun Grid Engine (SGE)\",\n          \"ORM\"\n        ],\n        images: [\n          require(\"./images/automap-1.png\"),\n          require(\"./images/automap-2.png\")\n        ]\n      }\n    ]\n  },\n  {\n    start: \"2010-02\",\n    finish: \"2011-11\",\n    position: \"Software Engineer\",\n    company: \"Office of Spatial Policy\",\n    achievements: [\n      \"I lead a team of four students to design and develop the extensible xMET ANZLIC desktop metadata entry tool. This tool was meant to take in arbitrary metadata standard schema and produce metadata entry interface of said schema. I later worked with a mentor to further refine the product for the department.\",\n      \"I worked with various metadata management tools including Geonetwork open source metadata catalogue. \",\n      \"I worked several requirements engineering and procurement processes for agency projects including the national gazetteer project.\"\n    ],\n    technology: [\"Java\", \"Swing\"]\n  },\n  {\n    start: \"2009-02\",\n    finish: \"2009-11\",\n    position: \"Student Software Engineer\",\n    company: \"National ICT Australia (NICTA)\",\n    description:\n      \"InterfereX was NICTA's interference cancellation router technology (femtocell) product.\",\n    achievements: [\n      \"I developed a Node B simulator (3G/UMTS software) for testing femtocell router.\",\n      \"I developed an XML message editing tool for debugging and editing NBAP messages.\"\n    ],\n    technology: [\"C++\", \"Java\", \"Swing\"]\n  }\n];\n\nexport default ExperienceData;\n","const VolunteerDataData = [\n  {\n    start: \"2018-07\",\n    finish: \"2019-06\",\n    position: \"Area 33 Director\",\n    company: \"Toastmasters International District 70\",\n    description:\n      \"Toastmasters international is world's largest public speaking and leadership development organisation where its members learn practical communication and leadership skills via practising those skills in toastmasters projects. This includes practising leadership roles at various levels of Toastmasters International which is set up as a hierarchical organisation.\",\n    achievements: [\n      \"I lead the officers of five Toastmasters clubs through performance planning (Distinguished Club Program), monitored their progress and reported back to Toastmasters International\",\n      \"I organised and ran two medium sized events including the 2018-2019 Area 33 International Speech Contest\",\n      \"I was the MC for the 2019 Division Level Humorous Speech Competition in front of over 100 people.\",\n      \"I mentored two new toastmasters in through first three projects of their toastmasters journey\"\n    ],\n    images: [require(\"./images/tm-1.jpg\"), require(\"./images/tm-2.jpg\")],\n    soft: [\n      \"Event Organisation\",\n      \"Leadership\",\n      \"Management\",\n      \"Reporting\",\n      \"Public Speaking\"\n    ]\n  },\n  {\n    start: \"2005-01\",\n    finish: \"2007-12\",\n    position: \"Hacker\",\n    company: \"Open Kaillera Project\",\n    description:\n      \"This was an open source project to replace a free to use closed-source middleware library project. The project allowed emulators (similar to virtual machines) of retro arcade gaming platforms to be played over network. This was done by sending input over the network and staying synchronised through dead-reckoning.\",\n    achievements: [\n      \"I reverse engineered the original binary network protocol used by Kaillera through wire tapping.\",\n      \"I produced an open source version of the library which was an in-place replacement of the original library.\",\n      \"I added features that was not available in the original library (e.g. game play recording and playback).\",\n      \"I developed a new high performance P2P protocol to replace an existing server/client protocol that reduced input latency to half.\",\n      \"I reverse engineered and developed a forward modelling and state roll-back game play mode that allowed the players to experience zero latency despite the game running over network.\"\n    ],\n    images: [require(\"./images/okai-1.jpg\"), require(\"./images/okai-2.png\")],\n    technology: [\n      \"Reverse Engineering\",\n      \"Peer to Peer\",\n      \"Low latency\",\n      \"Real time\",\n      \"C++\",\n      \"Assembly\"\n    ]\n  }\n];\n\nexport default VolunteerDataData;\n","import React from \"react\";\n\nexport function Container(props: any) {\n  return (\n    <div className=\"container\" {...props}>\n      {props.children}\n    </div>\n  );\n}\n\nexport function Full(props: any) {\n  return (\n    <div className=\"full\" {...props}>\n      {props.children}\n    </div>\n  );\n}\n\nexport function HalfLeft(props: any) {\n  return (\n    <div className=\"half-left\" {...props}>\n      {props.children}\n    </div>\n  );\n}\n\nexport function HalfRight(props: any) {\n  return (\n    <div className=\"half-right\" {...props}>\n      {props.children}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport DocumentTitle from \"react-document-title\";\nimport { Container, Full } from \"Components/Reactive\";\n\nexport default function Header(props: any) {\n  return (\n    <Container>\n      <Full>\n        <DocumentTitle title={props.title}>\n          <h1>{props.title}</h1>\n        </DocumentTitle>\n      </Full>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { Container, Full, HalfLeft, HalfRight } from \"Components/Reactive\";\n\nexport default function Summary(props: any) {\n  const { audience } = props;\n  return (\n    <React.Fragment>\n      <Container>\n        <Full>\n          <h2>{audience.technical ? \"TL;DR\" : \"Summary\"}</h2>\n        </Full>\n      </Container>\n      <Container>\n        <HalfLeft />\n        <HalfRight>\n          <ul>\n            {props.data.map((element: string[]) => {\n              let compiled = element\n                .slice(0, audience.detailLevel + 1)\n                .join(\" \");\n              return <li key={compiled}>{compiled}</li>;\n            })}\n          </ul>\n        </HalfRight>\n      </Container>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\n\nimport { Container, Full, HalfLeft, HalfRight } from \"Components/Reactive\";\n\nexport default function Education(props: any) {\n  const { audience, data } = props;\n  return (\n    <React.Fragment>\n      <Container>\n        <Full>\n          <h2>Education</h2>\n        </Full>\n      </Container>\n      {data\n        // .filter((element: any) => element.finish >= audience.since)\n        .map((element: any, key: number) => {\n          return (\n            <Container key={key}>\n              <HalfLeft>\n                {element.start} - {element.finish}\n              </HalfLeft>\n              <HalfRight>\n                <h3>\n                  {element.course} <small>- {element.institution}</small>\n                </h3>\n                {audience.detailLevel > 1 && <p>{element.description}</p>}\n                {audience.detailLevel > 1 && element.thesis && (\n                  <p>{element.thesis}</p>\n                )}\n                {audience.detailLevel > 0 && <p>Major: {element.major}</p>}\n              </HalfRight>\n            </Container>\n          );\n        })}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport arrayToSentence from \"array-to-sentence\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport { Container, Full, HalfLeft, HalfRight } from \"Components/Reactive\";\n\nexport default function Experience(props: any) {\n  const { audience, data, label } = props;\n  return (\n    <React.Fragment>\n      <Container>\n        <Full>\n          <h2>{label}</h2>\n        </Full>\n      </Container>\n      {data\n        .filter((element: any) => element.finish >= audience.since)\n        .map((element: any, key: number) => {\n          return (\n            <React.Fragment>\n              <Container key={key + Math.random()}>\n                <HalfLeft>\n                  {formatTime(element.start)} - {formatTime(element.finish)}\n                </HalfLeft>\n                <HalfRight>\n                  <h3>\n                    {element.position} <small>- {element.company}</small>\n                  </h3>\n                </HalfRight>\n              </Container>\n              <Project project={element} audience={audience} />\n              {audience.detailLevel > 0 &&\n                element.projects &&\n                element.projects\n                  .filter((project: any) => project.finish >= audience.since)\n                  .map((project: any) => (\n                    <Project project={project} audience={audience} />\n                  ))}\n            </React.Fragment>\n          );\n        })}\n    </React.Fragment>\n  );\n}\n\nexport function Project(props: any) {\n  const { project, audience } = props;\n  return (\n    <React.Fragment>\n      <Container>\n        <HalfLeft>\n          {audience.detailLevel > 1 &&\n            project.images &&\n            project.images.map((image: string) => {\n              return (\n                <a href={image}>\n                  <img className=\"thumb\" src={image} alt=\"\" />\n                </a>\n              );\n            })}\n        </HalfLeft>\n        <HalfRight>\n          {project.name && project.role && (\n            <h4>\n              {project.role} on {project.name}\n            </h4>\n          )}\n          {audience.detailLevel > 1 && project.description && (\n            <p>\n              <ReactMarkdown source={project.description} />\n            </p>\n          )}\n          {audience.detailLevel > 0 && project.achievements && (\n            <ul>\n              {project.achievements.map((achievement: string) => {\n                return <li key={achievement}>{achievement}</li>;\n              })}\n            </ul>\n          )}\n          {audience.detailLevel > 0 &&\n            audience.technical &&\n            project.technology && (\n              <p>Technical: {formatTechnology(project.technology)}</p>\n            )}\n          {audience.detailLevel > 0 && project.soft && (\n            <p>Other: {formatTechnology(project.soft)}</p>\n          )}\n        </HalfRight>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nfunction formatTechnology(list: string[]) {\n  list = list.sort();\n  return arrayToSentence(list);\n}\n\nfunction formatTime(input: string) {\n  if (input.match(/^\\d{4}[-]\\d{2}$/)) {\n    const [year, month] = input.split(\"-\");\n    return MONTHS[month] + \" \" + year;\n  } else {\n    return input;\n  }\n}\n\nconst MONTHS: { [x: string]: string } = {\n  \"01\": \"January\",\n  \"02\": \"February\",\n  \"03\": \"March\",\n  \"04\": \"April\",\n  \"05\": \"May\",\n  \"06\": \"June\",\n  \"07\": \"July\",\n  \"08\": \"August\",\n  \"09\": \"Septermber\",\n  \"10\": \"October\",\n  \"11\": \"November\",\n  \"12\": \"December\"\n};\n","import React from \"react\";\nimport { Container, Full } from \"Components/Reactive\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport default function Footer(props: any) {\n  return (\n    <React.Fragment>\n      <Container className=\"printOnly printFooter\">\n        <Full>\n          <ReactMarkdown source=\"For full portfolio, please visit: https://resume.nahidakbar.net.\" />\n        </Full>\n      </Container>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport Select from \"react-select\";\nimport { Container, Full } from \"Components/Reactive\";\n\nexport function AudiencePicker(props: any) {\n  const { audience, onChange } = props;\n\n  return (\n    <div className=\"notForPrint\">\n      <Container>\n        <Full>\n          <h2>What do you want to read?</h2>\n        </Full>\n      </Container>\n      <Container>\n        <Full>\n          <SelectWrapper\n            options={technicalOptions}\n            value={audience.technical.toString()}\n            onChange={(value: any) =>\n              onChange({\n                technical: (localStorage.resumeTechnical = value) === \"true\"\n              })\n            }\n          />\n        </Full>\n        <Full>\n          <SelectWrapper\n            options={detailLevelOptions}\n            value={audience.detailLevel.toString()}\n            onChange={(value: any) =>\n              onChange({\n                detailLevel: localStorage.resumeDetailLevel = parseInt(value)\n              })\n            }\n          />\n        </Full>\n        <Full>\n          <SelectWrapper\n            options={sinceOptions}\n            value={audience.since}\n            onChange={(value: any) =>\n              onChange({ since: localStorage.resumeSince = value })\n            }\n          />\n        </Full>\n      </Container>\n    </div>\n  );\n}\n\nexport enum DetailLevel {\n  Summary = 0,\n  SomeDetail = 1,\n  FullDetail = 2\n}\n\nexport type Audience = {\n  technical: boolean;\n  detailLevel: DetailLevel;\n  since: string;\n};\n\nconst year = new Date().getFullYear();\n\nexport const defaultAudience: Audience = {\n  technical: localStorage.resumeTechnical\n    ? localStorage.resumeTechnical === \"true\"\n    : true,\n  detailLevel: localStorage.resumeDetailLevel || 0,\n  since: localStorage.resumeSince || `${year - 10}`\n};\n\nconst technicalOptions = [\n  { value: \"true\", label: \"I want technical details\" },\n  { value: \"false\", label: \"Don't show me technical details\" }\n];\n\nconst detailLevelOptions = [\n  { value: \"0\", label: \"I want an outline\" },\n  { value: \"1\", label: \"I want some deatils\" },\n  { value: \"2\", label: \"I want full details\" }\n];\n\nconst sinceOptions: any[] = [];\n\nsinceOptions.push({\n  value: `${year - 1}`,\n  label: `I want history of past year (${year})`\n});\n\n// sinceOptions.push({\n//   value: `${year - 3}`,\n//   label: `I want history of past three years (${year - 3}-${year})`\n// });\n\nsinceOptions.push({\n  value: `${year - 5}`,\n  label: `I want history of past five years (${year - 5}-${year})`\n});\n\n// sinceOptions.push({\n//   value: `${year - 10}`,\n//   label: `I want history of past ten years (${year - 10}-${year})`\n// });\n\nsinceOptions.push({\n  value: `${year - 1000}`,\n  label: `I want full history`\n});\n\nfunction SelectWrapper(props: any) {\n  const { options, value, onChange } = props;\n  return (\n    <Select\n      options={options}\n      defaultValue={options.find((option: any) => option.value === value)}\n      styles={{\n        option: styles => {\n          return {\n            ...styles,\n            color: \"black\",\n            cursor: \"pointer\"\n          };\n        }\n      }}\n      onChange={(value: any) => onChange(value.value)}\n    />\n  );\n}\n","import React from \"react\";\n\nimport ReactMarkdown from \"react-markdown\";\n\nimport { Container, HalfLeft, HalfRight } from \"Components/Reactive\";\n\nexport default function Contact(props: any) {\n  let contact: any = {};\n  try {\n    contact = JSON.parse(localStorage.resumeContact);\n  } catch (e) {}\n  const keys = Object.keys(contact).sort();\n\n  return (\n    <React.Fragment>\n      {keys.length > 0 && (\n        <Container>\n          <HalfLeft />\n          <HalfRight>\n            {keys.map(key => {\n              return (\n                <div>\n                  {key}:{\" \"}\n                  <ReactMarkdown\n                    source={contact[key]}\n                    renderers={{ paragraph: \"span\" }}\n                  />\n                </div>\n              );\n            })}\n          </HalfRight>\n        </Container>\n      )}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\n\nimport BasicData from \"Data/basic\";\nimport SummaryData from \"Data/summary\";\nimport EducationData from \"Data/education\";\nimport ExperienceData from \"Data/experience\";\nimport VolunteerData from \"Data/volunteer\";\n\nimport Header from \"Components/Header\";\nimport Summary from \"Components/Summary\";\nimport Education from \"Components/Education\";\nimport Experience from \"Components/Experience\";\n\nimport Footer from \"Components/Footer\";\nimport { Audience, defaultAudience, AudiencePicker } from \"Components/Audience\";\nimport Contact from \"Components/Contact\";\n\nexport default class App extends React.Component<Audience, any> {\n  state = defaultAudience;\n\n  render() {\n    const updateState = (update: any) =>\n      this.setState((state: any) => Object.assign({}, state, update));\n    return (\n      <div>\n        <Header title={BasicData.name + \" - Résumé\"} />\n        <AudiencePicker audience={this.state} onChange={updateState} />\n        <Contact />\n        <Summary data={SummaryData} audience={this.state} />\n        <Education data={EducationData} audience={this.state} />\n        <Experience\n          label=\"Experience\"\n          data={ExperienceData}\n          audience={this.state}\n        />\n        <Experience\n          label=\"Volunteer Experience &amp; Hobby Projects\"\n          data={VolunteerData}\n          audience={this.state}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ftaa-1.e381555d.png\";","module.exports = __webpack_public_path__ + \"static/media/ftaa-2.b798b94c.png\";","module.exports = __webpack_public_path__ + \"static/media/ftaa-3.cf34b77e.png\";","module.exports = __webpack_public_path__ + \"static/media/magda-1.3b4ebda8.png\";","module.exports = __webpack_public_path__ + \"static/media/magda-2.19957093.png\";","module.exports = __webpack_public_path__ + \"static/media/groundwater-1.221c040d.png\";","module.exports = __webpack_public_path__ + \"static/media/groundwater-2.38ddadd1.png\";","module.exports = __webpack_public_path__ + \"static/media/automap-1.de445fea.png\";","module.exports = __webpack_public_path__ + \"static/media/automap-2.1b04fe9d.png\";","module.exports = __webpack_public_path__ + \"static/media/tm-1.342be1b3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tm-2.f9d3de72.jpg\";","module.exports = __webpack_public_path__ + \"static/media/okai-1.9fe965db.jpg\";","module.exports = __webpack_public_path__ + \"static/media/okai-2.1ed3f47c.png\";"],"sourceRoot":""}